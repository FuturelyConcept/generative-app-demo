# Pure AI Runtime Engine - ALL Business Logic
# This file contains the COMPLETE business logic for the application
# The AI engine uses these policies to make ALL runtime decisions
# NO code exists anywhere else - this IS the application logic

# Entities and their operations
entities:
  product:
    fields: [id, name, category, price, stock]
    operations: [view, add, delete, update]
    validation_rules:
      name: {required: true, type: string, min_length: 1, max_length: 100}
      category: {required: true, type: string, allowed_values: [Electronics, Furniture, Stationery]}
      price: {required: true, type: number, min: 0.01, max: 10000}
      stock: {required: true, type: integer, min: 0, max: 1000}
  
  user:
    fields: [id, name, email, role]
    operations: [view, context]

# Access Control Policies - AI determines permissions from this
access_policies:
  viewer:
    permissions: [view]
    ui_elements: [product_table, user_info]
    message: "Viewer can only see products - read-only access"
    description: "Basic user with viewing capabilities only"
    restrictions:
      - Cannot modify any data
      - Cannot access admin features
      - Limited to product viewing
    
  manager:
    permissions: [view, add]
    ui_elements: [product_table, add_button, user_info]
    message: "Manager can view and add products"
    description: "Business user who can manage inventory additions"
    restrictions:
      - Cannot delete products
      - Cannot access admin analytics
      - Can add products within business rules
    
  admin:
    permissions: [view, add, delete, update]
    ui_elements: [product_table, add_button, delete_buttons, user_info, admin_panel]
    message: "Admin has full access to all operations"
    description: "Full access user with all capabilities"
    restrictions: []
    special_features:
      - Access to analytics and insights
      - Can perform all CRUD operations
      - Can view system health and statistics

# UI Behavior Policies - AI determines interface from this
ui_behavior:
  product_table:
    base_columns: [name, category, price, stock]
    viewer_columns: [name, category, price, stock]
    manager_columns: [name, category, price, stock, add_actions]
    admin_columns: [name, category, price, stock, all_actions]
    
  themes:
    viewer: 
      color: "blue"
      layout: "minimal"
      style: "read-only"
      components: ["table", "filters"]
    manager: 
      color: "green"
      layout: "business"
      style: "productive"
      components: ["table", "add-form", "filters"]
    admin: 
      color: "red"
      layout: "full"
      style: "powerful"
      components: ["table", "add-form", "delete-controls", "analytics", "filters"]

  form_behavior:
    add_product:
      fields: [name, category, price, stock]
      validation: "real-time"
      submit_behavior: "immediate"
      success_action: "refresh_table"
    
    delete_product:
      confirmation: true
      confirmation_message: "Are you sure you want to delete this product?"
      success_action: "remove_from_table"

# Business Rules - AI enforces these automatically
business_rules:
  product_management:
    stock_thresholds:
      low_stock: 20
      critical_stock: 5
      max_stock: 1000
    
    price_rules:
      min_price: 0.01
      max_price: 10000.00
      currency: "USD"
      decimal_places: 2
    
    category_rules:
      allowed_categories: [Electronics, Furniture, Stationery]
      default_category: "Electronics"
      case_sensitive: false
    
    validation_rules:
      required_fields: [name, category, price, stock]
      name_min_length: 1
      name_max_length: 100
      special_characters_allowed: false
    
    inventory_rules:
      auto_generate_id: true
      id_prefix: "p"
      track_changes: true
      audit_trail: false

  user_management:
    session_rules:
      timeout: 3600
      max_operations_per_minute: 100
      concurrent_sessions: 1
    
    role_hierarchy:
      admin: [manager, viewer]
      manager: [viewer]
      viewer: []

# AI Response Templates - AI uses these to generate consistent responses
api_responses:
  success_messages:
    view: "Products retrieved successfully"
    add: "Product added successfully to inventory"
    delete: "Product removed from inventory"
    update: "Product information updated"
    
  error_messages:
    unauthorized: "Access denied - insufficient permissions for this operation"
    not_found: "Requested product not found in inventory"
    invalid_data: "Product data validation failed"
    duplicate: "Product with this name already exists"
    system_error: "AI Runtime Engine encountered an unexpected error"
    
  info_messages:
    empty_inventory: "No products found in inventory"
    filtered_results: "Showing filtered product results"
    bulk_operation: "Multiple products processed"

# AI Decision Prompts - These guide AI behavior (unused in mock mode)
ai_prompts:
  permission_check: |
    User with role '{role}' wants to perform action '{action}' on resource '{resource}'.
    Based on the access policies defined above, determine if this action is allowed.
    Consider the user's role, the requested action, and any restrictions.
    Return a decision with explanation.
  
  ui_generation: |
    For user role '{role}', determine which UI elements should be visible and active.
    Consider the user's permissions, theme preferences, and business context.
    Generate appropriate UI configuration.
    
  response_formatting: |
    Generate appropriate API response for user role '{role}' accessing '{endpoint}'.
    Include relevant data, permissions, user-specific messaging, and contextual information.
    Follow the business rules and access policies defined above.
    
  error_handling: |
    Handle error '{error}' for user role '{role}' performing '{action}'.
    Provide helpful, role-appropriate error message and recovery suggestions.
    Maintain security by not exposing internal system details.
    
  business_validation: |
    Validate '{operation}' on '{entity}' with data '{data}'.
    Apply all relevant business rules and validation constraints.
    Return validation result with specific error details if invalid.

# System Configuration - AI runtime behavior
system_config:
  ai_provider: "mock"  # Options: mock, huggingface, ollama
  response_format: "json"
  logging_level: "info"
  cache_policies: false
  real_time_decisions: true
  fallback_mode: "policy_based"
  
  performance:
    request_timeout: 30
    max_concurrent_requests: 100
    cache_ttl: 300
    
  security:
    validate_headers: true
    sanitize_input: true
    audit_requests: false
    rate_limiting: false

# Demo Configuration
demo_settings:
  auto_populate_data: true
  show_ai_insights: true
  expose_decision_process: true
  interactive_policy_editing: false
  
  test_scenarios:
    - name: "Role-based Access"
      description: "Same endpoint returns different data per user role"
      test_roles: [viewer, manager, admin]
      expected_differences: [ui_elements, permissions, data_access]
    
    - name: "Dynamic Validation"
      description: "AI validates data against business rules"
      test_data: [valid_product, invalid_product, edge_cases]
      expected_behavior: [accept, reject, sanitize]
    
    - name: "Policy-driven Responses"
      description: "Changing policies instantly changes behavior"
      modification: "policies.yaml"
      expected_impact: "immediate_behavior_change"